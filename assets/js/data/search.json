[
  
  {
    "title": "Customazing my Debian: GRUB, LUKS and SSDM",
    "url": "/posts/desktop-personalization/",
    "categories": "tinkering",
    "tags": "debian",
    "date": "2025-09-28 00:00:00 -0400",
    "content": "Today I decided to give a more personal touch to my desktop starting from the beginning, the boot process.  Using a GRUB theme  I discovered some weeks ago this page with very good looking GRUB themes https://github.com/Jacksaur/Gorgeous-GRUB/tree/main.  I tried two of them, the Cyberpunk 2077 and the Fallout one. Original look  After I updated to debian 13, my GRUB looked like this:   Grub is only shown in one screen   The text is really small but it has my Debian and UEFI options     I am not sure why my Windows didn’t appear as an option.   Installing a theme  The instructions are pretty easy https://github.com/Jacksaur/Gorgeous-GRUB/blob/main/Installation.md  Basically the steps are:    Download the theme   Put the files in /boot/grub/themes   Modify /etc/default/grub file:            GRUB_THEME= line should point to our new theme’s theme.txt       GRUB_GFXMODE= we can modify this line to change the resolution (this step is optional)           Finally run sudo update-grub.   Cyberpunk 2077 theme  The github page took me to its pling.com page, there I found the Files tab and downloaded the main.zip file.  To unzip I just ran: unzip Cyberpunk-GRUB-Theme-main.zipCyberpunk-GRUB-Theme-main.zip   That will upzip the folder we need.  As I didn’t have the theme folder I created before moving, then I moved it.  sudo mkdir /boot/grub/themes sudo mv Cyberpunk-GRUB-Theme-main /boot/grub/themes/.   After that I modify my /etc/default/grub file  I added this line GRUB_THEME=\"/boot/grub/themes/Cyberpunk-GRUB-Theme-main/Cyberpunk/theme.txt\"   Finally sudo update-grub   Result:   Grub still in only one screen   Details of my new GRUB  After that I decide to reduce the resolution to make the letter bigger.  I did some quick tests and chose GRUB_GFXMODE=1024x768 was good enough. I just added that line below the theme line in /etc/grub/default and that’s it.  This is the final result.   Now I can read easily  Fallout theme  I steps I did are exaclty the same (in fact easier as everything is ready), so there is no necessary to write them again.  However, this is the result:   Nice, it looks very nice  Improving LUKS prompt  After GRUB the first thing was a prompt asking me for a passphrase to unlock LUKS. Something like this:   The prompt is in both monitors, but that is another issue.   Before the prompt there is more information about the boot process.  To solve this issue, I used Plymouth 1 which is a program that allow us to have a graphical boot experience2 (basically it shows a boot screen).  Installing Plymouth  In Debian was really easy as it is in the official repository. I ran:  sudo aptitude install plymouth kde-config-plymouth plymouth-themes  And it installed them and any dependency.     kde-config-plymouth: It’s a package that allow us to customize plymouth graphically, in the KDE settings.   plymouth-themes: Just a bunch of themes that Debian provides.   Choosing a theme  Now I could chose one of the themes I just installed. These are the steps:     Go to System Settings   In the Appareance &amp; Style section, click Color and Themes   Click in Boot Splash Screen   Click in any of the available theme and then click Apply (It will ask for your password)    A visual reference of the steps.  After that I was ready for the test.  I restarted my PC and nothing happened. I went to the Debian’s wiki and noticed that I forgot to change the GRUB_CMDLINE_LINUX_DEFAULT in my /etc/default/grub.  I added splash to the line: GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash\"  And ran sudo update-grub to apply the changes.  Result:                                                                                                                   Your browser does not support the video tag. Here is a     link to the video file instead.           New splash boot      Well it did show me an image when prompted for LUKS password, it wasn’t the theme I chose. So, I went to the Debian wiki again and they recommend to change the Theme line in /usr/share/plymouth/plymouthd.defaults  I also ran: sudo update-initramfs -u -k all   But it didn’t work, in fact made everything worse. Plymouth started crashing.   Plymouth crashed but the booting process continued   The stackdump can be seen in both monitors  I went to the Arch’s wiki I noticed that maybe the error was because Plymouth (or the theme) is not handling well my weird monitor setup.  I started to search again I lucky enough I found this comment in the Arch’s forums. Basically, we can disable any monitor using Kernel Mode Setting.  I decided to give it a chance.  I modify my GRUB file again, to this: GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash video=HDMI-A-2:d\"   And finally I got:                                                                                                                   Your browser does not support the video tag. Here is a     link to the video file instead.           Solar splash boot      Additionally I solved the issue of having the LUKS prompt in two monitors, however, the KMS setting disabled completely my second monitor, I couldn’t enable it in KDE.  In the next section I talk about some workaround for that.  A Better SDDM  So the my first step was to undo the changes I did before, I enabled my second monitor and disabled Plymouth (I removed the video and splash from the GRUB_CMDLINE_LINUX_DEFAULT).     Don’t forget to run sudo update-grub after modifying any GRUB file   Now I have a base where I can start experimenting.  The first thing is to notice that even if KDE is running Wayland, SDDM is not. SDDM launch an X server.  systemctl status ...            │ ├─sddm.service            │ │ ├─1497 /usr/bin/sddm            │ │ └─1521 /usr/lib/xorg/Xorg -dpi 120 -background none -seat seat0 vt2 -auth /run/sddm/xauth_ztxQgn -noreset -displayfd 16 ...   KDE has an option to apply its monitor settings to SDDM, but it works only if SDDM is running Wayland.  Changing SDDM from X11 to Wayland  Once again, Arch’s wiki to the rescue.  I created the file /etc/sddm.conf.d/10-wayland.conf and put the lines they specify: [General] DisplayServer=wayland GreeterEnvironment=QT_WAYLAND_SHELL_INTEGRATION=layer-shell  [Wayland] CompositorCommand=kwin_wayland --drm --no-lockscreen --no-global-shortcuts --locale1   And tried.  Success!, SSDM didn’t launch a X11 server.  systemctl status ...            │ ├─sddm.service            │ │ └─1478 /usr/bin/sddm ...   Making SDDM use only one monitor  For this step I found this reddit thread  It says that we can disable one monitor in the KDE settings, apply the monitor settings to SDDM, enable it again and then SDDM will only show in one monitor.  To disable a monitor, I went to Display &amp; Monitor in the Input &amp; Output section of KDE System Settings. I only need to uncheck the Enabled box.   My settings with only 1 monitor enabled.  I followed by applying the KDE settings to SDDM     Go to System Settings   In the Appareance &amp; Style section, click Color and Themes   Click in Login Screen (SDDM)   Click in Apply Plasma Settings… (it is in the top). And write your password.    SDDM settings  Finally I enabled again the second monitor and it worked as expected.  Final result:   SDDM is only in one monitor   But KDE is has the two monitors active  Enabling second monitor after boot  With the KMS trick (basically disabling the second monitor), if fixed several of my issues:    SDDM is shown only in one monitor.   The LUKS password prompt is shown in one monitor too.   Plymouth shows the animation correctly.   But it didn’t allow me to use both monitors at the same time, what I needed is to have 1 monitor at boot and 2 after booting (or after login).  I found this another reddit thread with exactly what I need but for X11. So I decided to do something similar but in Wayland.  The Hard Way to solve it  I had to do a bunch of things so I decided to called The Hard Way.  This method involves getting the EDID of the second monitor, override it and trigger a connection and disconnection from the kernel.  There is already an Arch’s wiki page with that information and I found this post with related information  Steps:    I need to enable both monitors again so I removed video=HDMI-A-2:d from my /etc/default/grub.   Make a copy of the EDID     sudo mkdir /usr/lib/firmware/edid  sudo cp /sys/class/drm/card0-HDMI-A-2/edid /usr/lib/firmware/edid/viewsonic.bin                 I didn’t have any problem with the resolution so the EDID file was fine. I could just copy it.                Make an script to load the EDID file and simulate the hotplug of the monitor.      Before doing step 3, I had a hunch so I decided to test the hotplug part.      echo 1 &gt; /sys/kernel/debug/dri/0/HDMI-A-2/trigger_hotplug   -bash: /sys/kernel/debug/dri/0/HDMI-A-2/trigger_hotplug: Operation not permitted          I wasn’t sure why something seemesly simple could fail, but checking dmesg I found this      [ 1010.803098] Lockdown: bash: debugfs access is restricted; see man kernel_lockdown.7           Checking that man page, I learnt that the lockdown forbids the use of some kernel features (for example giving access to some subsystems, like debugfs I which I needed), also this:             On an EFI-enabled x86 or arm64 machine, lockdown will be automatically enabled if the system boots in EFI Secure Boot mode.           I looked how to disable the lockdown to no avail, until I found this thread in the RedHat site             Contact hardware vendor to disable Secure Boot in the server BIOS. There is no other way to disable the feature.           The only way to avoid the lockdown is to disable the Secure Boot. I disabled the Secure Boot in my PC to proceed with my experiments.             I didn’t want to add so much detail about how to disable Secure Boot as each motherboard will be different.        On my PC, I went to the UEFI Settings, select the Boot tab, select Secure Boot, and then disable it.           After disabling Secure Boot, echo 1 &gt; /sys/kernel/debug/dri/0/HDMI-A-2/trigger_hotplug was working.             Disabling Secure Boot is not the most secure thing you can do to your PC. Make sure you understand the implications.           Making the script for real   As I needed to run the script always after boot I thought that it would be better to use a systemd service.  These two links provide all the information I needed:     General information about units   oneshot vs simple services   [Unit] Description=Enable the second monitor Wants=sddm.service After=sddm.service  [Service] Type=oneshot RemainAfterExit=yes ExecStart=/bin/bash -c \"cat /usr/lib/firmware/edid/viewsonic.bin &gt; /sys/kernel/debug/dri/0/HDMI-A-2/edid_override\" ExecStart=/bin/bash -c \"echo on &gt; /sys/kernel/debug/dri/0/HDMI-A-2/force\" ExecStart=/bin/bash -c \"echo 1 &gt; /sys/kernel/debug/dri/0/HDMI-A-2/trigger_hotplug\"  [Install] WantedBy=graphical.target      This script could not work in your system as the path would be different.   I called second-monitor.service and moved it to /etc/systemd/system/ and refresh the list of units and finally enabled it.  sudo cp second-monitor.service /etc/systemd/system/. sudo systemctl daemon-reload sudo systemctl enable second-monitor.service     Tested it !   And it did work!. But I had to change the Solar theme to ceratopsian (The Debian’s 13 default), for some reason Solar just crashed.  So basically what I did was to disable one monitor using kernel parameters, and enable again with an small systemd service. This allowed to keep only one monitor working during boot and it looked a lot better.  The Easy way  Now, I tested another way to solve my issue, one that doesn’t envolve disabling secure boot or systemd services.  From the Plymouth’s page in the Arch wiki, I noticed that Plymouth can use the UEFI framebuffer3 and to test it I only had to add this plymouth.use-simpledrm parameter to the kernel.  So modified my /etc/default/grub.  After reboot, as I didn’t notice any difference, I added plymouth.debug to the kernel’s parameters to get more information.  After checking /var/log/plymouth-debug.log I saw 00:00:17.165 ../src/plugins/renderers/drm/plugin.c:987:load_driver         : drm driver: amdgpu   Well, it is using the amdgpu driver. Honestly I am not 100% sure of why it is not using the UEFI framebuffer, but the Arch wiki mentions that old UEFI system won’t use SimpleDRM as default because of the low resolution they support. Maybe my motherboard has one of those UEFI systems.  The Middle way  I continued testing stuff just for fun, so after reading the original post I wondered what if I blacklist my amdgpu module too?.  I added modprobe.blacklist=amdgpu to my GRUB_CMDLINE_LINUX_DEFAULT and updated GRUB to test it.  GRUB_CMDLINE_LINUX_DEFAULT=\"quiet splash plymouth.use-simpledrm plymouth.debug modprobe.blacklist=amdgpu\"    Plymouth in only 1 monitor and with low resolution   Plymouth logs  With those options, Plymouth shown the splash only in 1 monitor, although in a low resolution (from the logs, it seems 1024x768. So my previous guess was probably right). But to nobody surprise I ended in a text only system.   I got a text console  Pretty easy to fix, I just ran as root: modprobe amdgpu  And I got my SSDM back.  This made me thought, What about if I mix both solutions, forcing the use of SimpleDRM and systemd service to load the amdgpu module?  And that is exactly what I did (in fact was easier as I could use my previous service as a template).  [Unit] Description=Load the amdgpu module Wants=sddm.service Before=sddm.service  [Service] Type=oneshot RemainAfterExit=yes ExecStart=/bin/bash -c \"modprobe amdgpu\"  [Install] WantedBy=graphical.target      systemd has systemd-modules-load.service which only purpose is to load modules at an early stage of the booting process, however I decided to use my own service because I needed the amdgpu to load much later.   sudo cp amdgpu-loader.service /etc/systemd/system/. sudo systemctl daemon-reload sudo systemctl enable amdgpu-loader.service   And finally, Plymouth is being shown only in one monitor (with low resolution) and I get my graphical session without manual intervention.     If you still seeing a lot of text about plymouth during boot, check if you have plymouth.debug in your kernel parameters   Conclusions  This post took me a lot more time than what I expected, at the same time I enjoyed because I felt like I learnt a lot.  I showed you:         How to use a theme in GRUB: fairly easy actually.           Making SDDM to only use one monitor: modifying SDDM to use Wayland instead of X11 worth it and making it to respect my KDE settings it’s really good. Overall I liked what I did but if SDDM is using only one monitor and KDE two. Everytime I start a session there is a sound notification of a “device being plugged-in” (the second monitor). It is not that bad though.           Using Plymouth to beautify the booting process: This was the most challenging and I am not very satisfied with it, but I learnt many things and there is a little improvement. I still wish it was more smooth (there is room for improvement so I think I will keep pushing until I get the results I want or get bored)         It is worth to notice that while I use the Arch wiki a lot, I still using a Debian system. The Arch wiki is always talking about the most up to date software available, which is not the case for Debian. In the case of Plymouth Debian is using the latest tagged release, while Arch is using the development branch basically.   Extra: Adding a background image to GRUB  It seems that specifying a theme doesn’t override the default background image, thus creating some inconsistencies.  In my case I see the theme I selected and then I see the Debian’s background image.  Debian comes with the /etc/grub.d/05_debian_theme script, that makes sure there is a background image (and by default it will be Debian’s).  To fix this, I only need to add GRUB_BACKGROUND in /etc/default/grub and point it to the background theme.  For example (using the Fallout theme): GRUB_BACKGROUND=\"/boot/grub/themes/fallout-grub-theme-master/background.png\"   And then sudo update-grub.  Extra: KDE could replace SDDM in the future  I found this link talking about a new proposal from KDE, replacing SDDM as login manager.  It is really interesting to me as they look to improve the integration between the login manager and KDE itself.                 https://www.freedesktop.org/wiki/Software/Plymouth/ &#8617;&#xfe0e;                 https://en.wikipedia.org/wiki/Plymouth_(software) &#8617;&#xfe0e;                 https://wiki.archlinux.org/title/Plymouth#Using_SimpleDRM &#8617;&#xfe0e;          "
  },
  
  {
    "title": "Trying Google Search Console part II",
    "url": "/posts/google-console-ii/",
    "categories": "tinkering",
    "tags": "",
    "date": "2025-08-09 00:00:00 -0400",
    "content": "I am still learning about Google Search Console, and after some time I finally got some information.  Like performance:  I can see how many times my website appeared in a search  Or indexing:  There are some pages that aren’t being indexed  The image above shows that there are some issues that doesn’t allow google to index all my pages.  To see what is happening I went to the Indexing -&gt; Page section on the left and saw  Reasons that block the indexing of some pages  Clicking any of those reasons took me to the specific details, like Not Found (404).   This page is returing 404  I looked at the URL and that page obviously doesn’t exist. That means I wrote something wrong in that post and I need to fixed.  Now I am going to try to fix each of those issue to improve my website. "
  },
  
  {
    "title": "How I expanded my LUKS and LV (Logical Volumes) partitions",
    "url": "/posts/expanding-luks-lvm/",
    "categories": "tinkering",
    "tags": "debian",
    "date": "2025-08-08 00:00:00 -0400",
    "content": "I used to dual boot in a 1 TB nvme, but it was almost full so I got a new nvme disk of 2TB. And I wanted to use the new disk only for Linux and the old one for Windows.  lsblk looked like this:  lsblk  NAME                MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINTS nvme0n1             259:0    0   1.8T  0 disk   nvme1n1             259:1    0 931.5G  0 disk   ├─nvme1n1p1         259:2    0   100M  0 part  /boot/efi ├─nvme1n1p2         259:3    0    16M  0 part   ├─nvme1n1p3         259:4    0   200G  0 part   ├─nvme1n1p4         259:5    0     2G  0 part  /boot ├─nvme1n1p5         259:6    0 728.9G  0 part   │ └─nvme0n1p5_crypt 253:0    0 728.9G  0 crypt  │   ├─debian-root   253:1    0  83.8G  0 lvm   / │   └─debian-home   253:2    0 645.1G  0 lvm   /home └─nvme1n1p6         259:7    0   509M  0 part      nvme0n1 was the new one   nvme1n1 was old one   nvme1n1p5 was a LUKS partition and inside it had two LV.      Remember to backup your data first   Preparations steps  The first thing to do was to create the partitions in the new disk. As I would clone the older partition, the new ones needed to be at least as big as the old ones.  To create the partitions I decided to use KDE Partition manager, but any other program (like fdisk or gparted) should have worked just fine.   The disk was new, there is no partition table  I clicked New Partition Table button.  Then the New Partition button on the left to create the partitios I needed.  In the Pending Operation section at the bottom, you can see what the program is about to do. Finally I clicked Apply.     Creating a new table partion will erase your data, make sure you select the correct disk.   Now it looked like this:   The disk has some partitions now  After that, I was ready for the cloning part, I decided to use Rescuezilla which is  GUI to clonezilla for the task.  First I downloaded the Rescuezilla iso image from here.  Then I needed to burn it in a usb drive, for this I used balena-etcher 1 because it is really easy to use.  I only had to unzip the balena zip file and everything I needed is there. To start it I ran ./balena-etcher inside the balena folder.  I selected the iso and the usb drive, this is how it looked.   Balena window     Before flash make sure you select the correct drive.   Then, clicked flash.  Cloning the partitions  The good thing is Rescuezilla is based on Ubuntu, it would be really easy to run any additional command I could need.  The plan consisted on the following:    Clone the partitions to the new disk.   Resize the LUKS partition and the VG under it.   Make sure I can mount the partitions and everything is ok.   Change the UUID of the old /boot and the old LUKS, so they won’t be mounted when I restart my PC.   Profit!   These were the UUID of the old disk nvme1n1                                                                                                             ├─nvme1n1p1         vfat        FAT32                        CA0E-4D9E                                63.3M    34% /boot/efi ├─nvme1n1p2                                                                                                         ├─nvme1n1p3         ntfs                                     D2A60EAEA60E92E1                                       ├─nvme1n1p4         ext4        1.0                          1142f508-b892-4bca-b0cc-ab1accdf9db9      1.3G    26% /boot ├─nvme1n1p5         crypto_LUKS 2                            2a659480-bf29-4944-9d52-6d078bdfd346                   │ └─nvme0n1p5_crypt LVM2_member LVM2 001                     bPQHVr-kxof-cEZL-0eDN-XYEd-tYQY-PJBY6a                 │   ├─debian-root   ext4        1.0                          274d68b8-66af-4652-a23e-b4e05ce6d4a8     26.1G    63% / │   └─debian-home   ext4        1.0                          aeeb4963-7f46-4eb8-8353-2b955efcc6f3    240.4G    57% /home └─nvme1n1p6         ntfs                                     F44234364233FC44                                        After Rescuezilla booted I was welcome with this:   Rescuezilla Main Menu     I clicked Clone   It asked me for the source and destination disks.        I selected the 3 partitions I wanted to clone and unchecked the Overwrite the partition table button to be able to select the final partition on the final disk.  Rescuezilla partitions to be cloned      I saw the plan and confirmed it.   I waited while it was doing its work.   I got an empty window for some reason, but it finished and it showed the summary of the operation.  Rescuezilla operation summary   Resizing  I proceeded to resize stuff, lsblk -f showed me this: nvme0n1                                                                                                   ├─nvme0n1p1 vfat        FAT32                        CA0E-4D9E                                            ├─nvme0n1p2 ext4        1.0                          1142f508-b892-4bca-b0cc-ab1accdf9db9                 └─nvme0n1p3 crypto_LUKS 2                            2a659480-bf29-4944-9d52-6d078bdfd346                 nvme1n1                                                                                                   ├─nvme1n1p1 vfat        FAT32                        CA0E-4D9E                                            ├─nvme1n1p2                                                                                               ├─nvme1n1p3 ntfs                                     D2A60EAEA60E92E1                                     ├─nvme1n1p4 ext4        1.0                          1142f508-b892-4bca-b0cc-ab1accdf9db9                 ├─nvme1n1p5 crypto_LUKS 2                            2a659480-bf29-4944-9d52-6d078bdfd346                 └─nvme1n1p6 ntfs                                     F44234364233FC44   As expected, the partitions had the same UUID.  First checked the new partitions (/boot and /boot/efi)  The EFI partition fsck /dev/nvme0n1p1 fsck from util-linux 2.40.2 fsck.fat 4.2 (2021-01-31) /dev/nvme0n1p1: 192 files, 33451/98304 clusters   I checked the size too: fdisk -s /dev/nvme0n1p1 102400  (102400 / 1024 = 100MiB)  fatresize -i /dev/nvme0n1p1 fatresize 1.1.0 (20240401) part(start=2048, end=206847, length=204800) FAT: fat32 Cur size: 104857600 Min size: 35128832 Max size: 2000398934016  (104857600 / 1024 = 102400 KiB)  The boot partition  e2fsck -f /dev/nvme0n1p2  e2fsck 1.47.1 (20-May-2024) Pass 1: Checking inodes, blocks, and sizes Pass 2: Checking directory structure Pass 3: Checking directory connectivity Pass 4: Checking reference counts Pass 5: Checking group summary information /dev/nvme0n1p2: 358/154880 files (3.1% non-contiguous), 156958/640000 blocks   resize2fs /dev/nvme0n1p2  resize2fs 1.47.1 (20-May-2024) The filesystem is already 640000 (4k) blocks long.  Nothing to do!   The LUKS partition Now the fun part, I really appreciate this answer in Stackoverflow  cryptsetup luksOpen /dev/nvme0n1p3 crypt-volume Enter passphrase for /dev/nvme0n1p3:   It is open: nvme0n1           259:0    0   1.8T  0 disk   ├─nvme0n1p1       259:5    0   100M  0 part   ├─nvme0n1p2       259:6    0   2.4G  0 part   └─nvme0n1p3       259:7    0   1.8T  0 part     └─crypt-volume  252:0    0   1.8T  0 crypt      ├─debian-root 252:1    0  83.8G  0 lvm        └─debian-home 252:2    0 645.1G  0 lvm      Looks like Rescuezilla knew this was a LUKS partition because the size was correct.  cryptsetup status crypt-volume /dev/mapper/crypt-volume is active and is in use.   type:    LUKS2   cipher:  aes-xts-plain64   keysize: 512 bits   key location: keyring   device:  /dev/nvme0n1p3   sector size:  512   offset:  32768 sectors   size:    3901663232 sectors   mode:    read/write   Some calculations: ((((3901663232 * 512) / 1024) / 1024) / 1024) / 1024 = 1.816 which is the right size of the partition in TiB.  So I only needed to change the LV.  root@ubuntu:/# vgs   VG     #PV #LV #SN Attr   VSize    VFree   debian   1   2   0 wz--n- &lt;728.88g    0     root@ubuntu:/# vgchange -a n debian 0 logical volume(s) in volume group \"debian\" now active  cryptsetup luksClose crypt-volume cryptsetup luksOpen /dev/nvme0n1p3 crypt-volume      To close the LUKS partition, the VG should be deactivated   # This step did nothing in my case, otherwise it would have expanded the LUKS and # gets the free space on the partition. cryptsetup resize crypt-volume   root@ubuntu:/# vgchange -a y debian   2 logical volume(s) in volume group \"debian\" now active  root@ubuntu:/# pvs   PV                       VG     Fmt  Attr PSize    PFree   /dev/mapper/crypt-volume debian lvm2 a--  &lt;728.88g    0   root@ubuntu:/# pvresize /dev/mapper/crypt-volume    Physical volume \"/dev/mapper/crypt-volume\" changed   1 physical volume(s) resized or updated / 0 physical volume(s) not resized    root@ubuntu:/# pvs   PV                       VG     Fmt  Attr PSize  PFree    /dev/mapper/crypt-volume debian lvm2 a--  &lt;1.82t &lt;1.11t   Resizing using an specific size: lvresize -L 100G /dev/debian/root    Size of logical volume debian/root changed from &lt;83.82 GiB (21457 extents) to 100.00 GiB (25600 extents).   Logical volume debian/root successfully resized.   Resizing using the free space of the whole volume group: lvresize -l +100%FREE /dev/debian/home    Size of logical volume debian/home changed from &lt;645.06 GiB (165135 extents) to &lt;1.72 TiB (450677 extents).   Logical volume debian/home successfully resized.   Then lsblk showed: └─nvme0n1p3       259:7    0   1.8T  0 part     └─crypt-volume  252:0    0   1.8T  0 crypt      ├─debian-root 252:1    0   100G  0 lvm        └─debian-home 252:2    0   1.7T  0 lvm     Finally I needed to check and resize the filesystems.     I removed several lines and replaced them with ... to keep it short.   root@ubuntu:/# e2fsck -f /dev/mapper/debian-root  e2fsck 1.47.1 (20-May-2024) Pass 1: Checking inodes, blocks, and sizes Inode 4849689 extent tree (at level 1) could be shorter.  Optimize&lt;y&gt;? yes ... Inode 4856185 extent tree (at level 1) could be narrower.  Optimize&lt;y&gt;? yes Pass 1E: Optimizing extent trees Pass 2: Checking directory structure Pass 3: Checking directory connectivity Pass 4: Checking reference counts Pass 5: Checking group summary information  /dev/mapper/debian-root: ***** FILE SYSTEM WAS MODIFIED ***** /dev/mapper/debian-root: 485187/5496832 files (0.5% non-contiguous), 13627683/21971968 blocks  root@ubuntu:/# e2fsck -f /dev/mapper/debian-home  e2fsck 1.47.1 (20-May-2024) Pass 1: Checking inodes, blocks, and sizes Inode 1574716 extent tree (at level 1) could be narrower.  Optimize&lt;y&gt;? yes ... Inode 41039976 extent tree (at level 1) could be shorter.  Optimize&lt;y&gt;? yes Pass 1E: Optimizing extent trees Pass 2: Checking directory structure Pass 3: Checking directory connectivity Pass 4: Checking reference counts Pass 5: Checking group summary information  /dev/mapper/debian-home: ***** FILE SYSTEM WAS MODIFIED ***** /dev/mapper/debian-home: 893701/42278912 files (2.8% non-contiguous), 97611541/169098240 blocks   Note that I used another way to select the device, as it is a symbolic link. root@ubuntu:/# resize2fs /dev/mapper/debian-root  resize2fs 1.47.1 (20-May-2024) Resizing the filesystem on /dev/mapper/debian-root to 26214400 (4k) blocks. The filesystem on /dev/mapper/debian-root is now 26214400 (4k) blocks long.  root@ubuntu:/# resize2fs /dev/mapper/debian-home  resize2fs 1.47.1 (20-May-2024) Resizing the filesystem on /dev/mapper/debian-home to 461493248 (4k) blocks. The filesystem on /dev/mapper/debian-home is now 461493248 (4k) blocks long.   Some tests After the resize, I tested them:  mount /dev/mapper/debian-root /mnt/test/ root@ubuntu:/# ls /mnt/test/ bin  boot  dev  etc  home  initrd.img  initrd.img.old  lib  lib32  lib64  libx32  lost+found  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var  vmlinuz  vmlinuz.old   mount /dev/mapper/debian-home /mnt/test/ root@ubuntu:/# ls /mnt/test/ adolfo  lost+found  ls /mnt/test/adolfo/ansible-bootstrap/ playbook.yml  templates  test.yaml   Everything looked excellent!  Changing the UUID Finally I needed to change the UUID of some of the old partitions partitions. For /boot, we can use tune2fs (but first it would need to run e2fsck)  tune2fs -U random /dev/nvme1n1p4  tune2fs 1.47.1 (20-May-2024) Setting the UUID on this filesystem could take some time. Proceed anyway (or wait 5 seconds to proceed) ? (y,N) &lt;proceeding&gt;   For the old LUKS2 we need to generate an UUID first. root@ubuntu:/# uuidgen -r f8c54c68-5fe1-48c4-b7d5-026c7d4694fc  Next:  cryptsetup luksUUID --uuid=f8c54c68-5fe1-48c4-b7d5-026c7d4694fc /dev/nvme1n1p5  WARNING! ======== Do you really want to change UUID of device?  Are you sure? (Type 'yes' in capital letters): YES   It looked like this: nvme0n1                                                                                                          ├─nvme0n1p1      vfat        FAT32                        CA0E-4D9E                                              ├─nvme0n1p2      ext4        1.0                          1142f508-b892-4bca-b0cc-ab1accdf9db9                   └─nvme0n1p3      crypto_LUKS 2                            2a659480-bf29-4944-9d52-6d078bdfd346                     └─crypt-volume LVM2_member LVM2 001                     bPQHVr-kxof-cEZL-0eDN-XYEd-tYQY-PJBY6a                 nvme1n1                                                                                                          ├─nvme1n1p1      vfat        FAT32                        CA0E-4D9E                                              ├─nvme1n1p2                                                                                                      ├─nvme1n1p3      ntfs                                     D2A60EAEA60E92E1                                       ├─nvme1n1p4      ext4        1.0                          7373f983-2ec7-4f56-9866-f82607d4bc61                   ├─nvme1n1p5      crypto_LUKS 2                            f8c54c68-5fe1-48c4-b7d5-026c7d4694fc                   └─nvme1n1p6      ntfs                                     F44234364233FC44   The old partitions won’t be pick up at boot as they looks different.  Now if everythig was correct, my PC should have be able to boot without caring about which disk it uses, as grub would choose the new /boot and the booting process would try to unlock the new LUKS.  Result  Well, it couldn’t boot from the new disk but the old one. At least I was right about that didn’t matter which disk it uses, the system would boot.  lsblk  NAME                MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINTS nvme0n1             259:0    0   1.8T  0 disk   ├─nvme0n1p1         259:1    0   100M  0 part   ├─nvme0n1p2         259:2    0   2.4G  0 part  /boot └─nvme0n1p3         259:3    0   1.8T  0 part     └─nvme0n1p5_crypt 253:0    0   1.8T  0 crypt      ├─debian-root   253:1    0   100G  0 lvm   /     └─debian-home   253:2    0   1.7T  0 lvm   /home nvme1n1             259:4    0 931.5G  0 disk   ├─nvme1n1p1         259:5    0   100M  0 part  /boot/efi ├─nvme1n1p2         259:6    0    16M  0 part   ├─nvme1n1p3         259:7    0   200G  0 part   ├─nvme1n1p4         259:8    0     2G  0 part   ├─nvme1n1p5         259:9    0 728.9G  0 part   └─nvme1n1p6         259:10   0   509M  0 part   I was pretty sure the problem was grub wasn’t installed correctly, so I retried that.  First I needed the line GRUB_DISABLE_OS_PROBER=false  in my /etc/default/grub because I wanted grub to detect Windows automatically.  Then I unmounted the old EFI partition and mounted the new one.  adolfo@debian-desktop:~/Projects/webpage$ sudo umount /boot/efi adolfo@debian-desktop:~/Projects/webpage$ sudo mount /dev/nvme0n1p1 /boot/efi   I reinstalled grub.  sudo grub-install --efi-directory=/boot/efi /dev/nvme0n1 Installing for x86_64-efi platform. Installation finished. No error reported.   Yeah, it worked, but it was still mounting the old partition.  I checked a couple of things and my /etc/fstab mounts /boot/efi using UUID, and I didn’t change the UUID for that partition. That was the issue.  I installed the mtools to use mlabel command3. First I was sure the partition was unmounted, then I ran:  mlabel -N CA0E5D9E -i /dev/nvme1n1p1 ::      I wasn’t sure how those label are created, so I just picked up the original and changed one  character.   Now it works as expected, and that’s how I started to use my new disk.  Extra I booted on Windows and from there I modified its partition to use the whole disk.  I have used AOMEI Partition Assistant Standard and I liked.  You can download it here  After the installation the first screen is this one:  AOMEI first menu  Now to delete a partition, just click it and the option would be on the right column.   Options column  I deleted the old EFI, /boot and LUKS; then I will move the C: partition and extend it.  After deleting, moving, and merging, the disk looked like this.  Final partitions in the old disk  Now I applied the changes. I chose to Restart into Windows PE mode when it asked me.     I had issues restarting into the Windows PE mode, basically UEFI was selecting the wrong disk and Windows was booting normally. After a couple of tries, I selected the other disk and the PE mode started.   Final lsblk adolfo@debian-desktop:~$ lsblk  NAME                MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINTS nvme0n1             259:0    0   1.8T  0 disk   ├─nvme0n1p1         259:2    0   100M  0 part  /boot/efi ├─nvme0n1p2         259:3    0   2.4G  0 part  /boot └─nvme0n1p3         259:4    0   1.8T  0 part     └─nvme0n1p5_crypt 253:0    0   1.8T  0 crypt      ├─debian-root   253:1    0   100G  0 lvm   /     └─debian-home   253:2    0   1.7T  0 lvm   /home nvme1n1             259:1    0 931.5G  0 disk   ├─nvme1n1p1         259:5    0    16M  0 part   ├─nvme1n1p2         259:6    0   931G  0 part   └─nvme1n1p3         259:7    0   509M  0 part                   https://etcher.balena.io/#download-etcher &#8617;&#xfe0e;                 https://scriptthe.net/2016/08/24/changing-uuids-on-luks-encrypted-partitions/ &#8617;&#xfe0e;                 https://superuser.com/a/1744103 &#8617;&#xfe0e;          "
  },
  
  {
    "title": "Trying Google Search Console",
    "url": "/posts/google-console/",
    "categories": "tinkering",
    "tags": "",
    "date": "2025-07-20 00:00:00 -0400",
    "content": "The Search Console is a tool from Google that help us to improve the position of our webpages in Google search results.  It offers ways to measure traffic, perfomance and fix issues1.  I want to give a try to make my blog a little bit better and give it more presence on the web.  Currently if I check the details of the search result of one of my blog post it would look like this:   Details showing that Google seems wary about my site because it couldn’t find information about it  Today I want to check if the above tools could help me to improve those details.  Steps    click on Start now   I chose Domain* instead of *URL prefix            We need to verify the domain through DNS       I went to AWS, then to Route53 (I manage my domains there)       We need to create a TXT record with the information provided by Google  (As I already have a TXT record, I just added the new info to the previous record)           Click on verify and wait, it should said Ownership verified   Google started collecting information about your site.   After a couple of hours I still don’t see any information so I decided to split this in two posts.  I will continue as soon I have something to show about my website.                 Search Console &#8617;&#xfe0e;          "
  },
  
  {
    "title": "Fixing Surviving Mars",
    "url": "/posts/surviving-mars/",
    "categories": "gaming",
    "tags": "debian, repairs",
    "date": "2025-05-31 00:00:00 -0400",
    "content": "The problem I noticed the linux native version of Surviving Mars has issues with my dual monitor setup. Basically it disables my vertical one but that is not all, it also has some glitches.  The objects seems to be “floating” and the shadows are not touching anything.     I discovered that using the windowed mode, my second monitor keeps working, but the glitches still.   I added some photos below.   Both monitors are working fine just before I start the game   My left monitor goes black and only the superior corner left of the other one shows something   Only my right monitor is working now  Now the glitches:   The installations and dome are floating   Even the rocks are in the air  I tried -w 1920 -h 1080 and didn’t work     Probably because those options are for valve/source games   Now if we try with proton, my dual monitor setup works as expected and there is not glitches   With proton it works flawless     I believe it works because wine can emulate a virtual desktop, but I still not understand 100% why it works.   I am going to show you what I did.  Idea I guessed the main issue was Surviving Mars seeing my two monitors just as one really big (that would explain that just the corner shows something while starting).  So I wanted to try gamescope https://github.com/ValveSoftware/gamescope which is a microcompositor which allows me to set up custom resolution that the game would “see”.  Trying gamescope  Debian As I use Debian I tried first with the version in the apt repo, I ran: sudo aptitude install gamescope  I tried several times, nevertheless it didn’t work. I just assumed that it is because I ran steam with flatpak.  So I just removed the package and proceeded to install it using flatpak.  Flatpak  I ran flatpak install gamescope  and I chose runtime/org.freedesktop.Platform.VulkanLayer.gamescope/x86_64/24.08.  Now gamescope finally works. Now I only need to find the correct setting.  Results  I tried several gamescope options and they help me with the glitches, but I couldn’t get to fix the issue with the second monitor going black.  Just gamescope -- %command% in the launch option was enough to fix the glitches.  I decided to start the game in windowed mode and voilà,  the game was running and my second monitor was showing discord.   No glitches and both monitors working  But even with a window maximized I can see the title bar and my other open programs in the botton bar and I don’t like to play that way. Thankfully it has a simple solution, I could simply click the window bar and choose  fullscreen and KDE will do the rest.   Location of the fullscreen option in KDE  However, doing that every time is silly. KDE allows you to define some rules to apply to windows and that exactly what I need.  Instead of just click fullscreen, click on Configure special application settings…  and a new window will appears.  Then click in add property… at the botton, look for Fullscreen, select Apply Initially and __Yes_. Finally __Apply_ and we are done.   Window rules options for Surviving Mars  Now I can play Surviving Mars in 1920x1080 fullscreen without any glitch and linux native.  I kept this option gamescope -H 1080 -b -- %command% just for consistency.   Now I can play in fullscreen without any issue  Final thoughts: I like to solve problems, but for any other person probably it would be better just to use proton. "
  },
  
  {
    "title": "Changing battery of robot vaccum Lefant M213S",
    "url": "/posts/changing-battery/",
    "categories": "tinkering",
    "tags": "repairs",
    "date": "2025-05-10 00:00:00 -0400",
    "content": "Two weeks ago I noticed that M213S wasn’t charging correctly (the led was red and it was beeping awfuly loud), so I thought that maybe it was the battery.     I bought this vaccum used a few years ago thus the lifespan I think it was normal.   The new battery I bought this one in Amazon1 (but you can find it cheapear in Aliexpress)  The new battery  The steps I did to do the replacement:          Make sure the vaccum’s switch is off.  Shutting down the vaccum           Remove all 6 small screws from the bottom. You are going to need the small screwdriver that came with the battery replacement.  Screws location           Remove the top. Be careful to not pull the cables.  How it looks inside           I disconnected these sensor cables to make easier the next steps.  These should be the IR cables           Remove the screws that keep the board attached to the vaccum.  There are 3 screws in this board           Lift a little bit the board to get access to the battery. Probably you are going to need to disconnect more cables.  You can see the original blue battery           Replace the battery and connect the battery. The batteries are keep in place by pression.  New battery in position           We are almost done, now you need to reconnect all the cables and put the screws into the board.  The board with the cables and screws           Put the external screws again.  It’s easier now           The robot vaccum is charging fine. Now the leed is blue.  Problem resolved      I tested a couple of times and it is working fine again.  The old battery This is the original battery in case you want to see the details.  Original battery     The new one is 100mah bigger, I expect the vacuum will work a little bit more.                  Amazon &#8617;&#xfe0e;          "
  },
  
  {
    "title": "Add dictionaries and export notes in KOReader",
    "url": "/posts/exports-dictionaries/",
    "categories": "kobo",
    "tags": "ereader",
    "date": "2024-02-11 00:00:00 -0500",
    "content": "I have been playing with KOReader for some days and so far it is very good. It has a lot of options to customize the experience of using my Kobo, at first it could be overwhelming but I think it is worth it.  Now, I really missed it didn’t have a dictionary included. So let’s see  how to add one.  How to add a dictionary to KOReader     Find a dictionary in the StarDict format.   Copy the dictionary to .adds/koreader/data/dict/   I tried an english dictionary made from Wiktionary1.  After I decompress the file, it looks like this:  adds/koreader/data/dict/dict-en-en/    res/   dict-data.dict.dz   dict-data.idx   dict-data.ifo   dict-data.syn      As dictionaries can lives in different folders, I can keep adding them. For example, I can add an Spanish dictionary next.   Now we can see the dictionary running in KOReader.   The dictionary dialog  Download dictionaries in KOReader directly KOReader has a function to download dictionaries directly in the kobo.  These are the steps to do it:     Open the main menu.   Tap the magnifying glass.   Tap Settings, then Dictionary Settings   Tap Download dictionaries   Choose a language   Tap the title of a dictionary you want, then Download.   I chose the manual method because I like Wiktionary and it has a huge number of entries.  How to export highlights and notes  I use to highlight a lot while reading and I’m really glad to find that exporting those it is really easy in KOReader     Open your book.   Open the main menu and tap the wrench and screwdriver icon.   Then tap Exports all notes in this book   Find your notes in .adds/koreader/clipboard/      You can choose different formats like markdown for your notes and change the destination folder. Both options are in the same menu.      You can export highlights into your Calibre using the KOReader Sync plugin. But I did a quick test and the highlights aren’t ordered.                  ebook-reader-dict &#8617;&#xfe0e;          "
  },
  
  {
    "title": "Installing Plato and KOReader in my Kobo",
    "url": "/posts/flashing-kobo/",
    "categories": "kobo",
    "tags": "firmware, ereader",
    "date": "2024-01-11 00:00:00 -0500",
    "content": "Since a bought my Kobo Libra H2O, I have been thinking about tinker it a little bit installing a custom firmware and readers. And after a friend of mine convinced me, I finally decided to do it.  I am going to install KOReader1 and Plato2. Both are custom readers for Kobo (and other devices) with more features than the original.  I understand that KOReader has a lot of options while Plato is more streamline and it is better to read PDFs.  Getting the files  In this link, we find the instructions to install each of the readers (or both at the same time) as well as a little script to make everything easier.     Get the zip, in my case KOReader and Plato   Get the script.      The above links points to an specific version, in case they are broken. Review the forum thread and use the new links.   Installing the files     Do a full restart of the kobo, as it is suggested in the forum.   With the Kobo in the home screen (without opening any book), connect the kobo to the computer and mount it.   Run the script and follow the instructions.   Now, eject and unplug the kobo.      My Kobo restarted after I ejected it. Depending of your device, maybe you have to restart it manually.   During a the restart, Kobo will install the new readers and other things.  Result  Now I see a little new menu call NickelMenu at the botton right corner. That is the menu we are going to use to launch Plato and KOReader.   NickeMenu  KOReader  The first thing I saw, was the tutorial. I can navigate throught the files like a normal unix filesystem (the home is /mnt/onboard/) and it shows me folders with the name of the authors.   Books in KOReader  I opened The Prince and among the options I found a two columns setting.   Using the option of two columns  This is how the top menu looks like.  KOReader top menu  Really insteresting, and I just learned that there is a plugin for KOReader to enable SSH!.  I will review the other plugins.  Plato  Opening Plato for first time it didn’t offer any tutorial or guide, instead, a very intuitive  homescreen (really similar to the original one).   Books in Plato  I opened again The Prince to see the options. To the right I can tap in the icon next to the magnifying glass to go to the chapters and jump to a specific one.   Plato bottom menu  This is how the Plato menu looks like. Effectly, less options but still interesting, and it has some applications.   Plato top menu  It has a calculator! , that’s amazing!.   I didn’t expect a calculator  Conclusions  Both KOReader and Plato look very promising. I have the feeling that powerusers will prefer KOReader for its options and customizations, while people who only wants a better experience will be happy with Plato.  Meanwhile, I will use both to decide and probably will use one or the other depending on what I am reading. For example, KOReader has some features to read manga3. I need to try those.     The script will install two component more, NickelMenu4 and KFMon5. Nickelmenu is the little menu I showed you, while KFMon allows us to launch specific commands when a book is opened.                  KOReader &#8617;&#xfe0e;                 Plato &#8617;&#xfe0e;                 Panel zoom &#8617;&#xfe0e;                 NickelMenu &#8617;&#xfe0e;                 KFMon &#8617;&#xfe0e;          "
  },
  
  {
    "title": "Installing Pi-hole in my raspberry pi",
    "url": "/posts/installing-pihole/",
    "categories": "self-hosted",
    "tags": "raspberry-pi, dns",
    "date": "2024-01-01 00:00:00 -0500",
    "content": "Due to the high number of obnoxious ads in modern internet, I decided to block as much as I can at a DNS level using Pi-hole in my RPi.     DNS (Domain Name System) is the one that allow us to use www.google.com instead of 142.251.41.68. Basically it translate domains names (like facebook.com) to IP address  (like 31.13.80.36), so we don’t have to remember a bunch of numbers.   Installing it  It is pretty easy actually. You only have to run curl -sSL https://install.pi-hole.net | bash   And then, go through the questions in the terminal.     Running a random bash script from internet could be dangerous. Don’t do it if you don’t trust the person (or group) that is providing it. In that case it is better to download it and verify first before running it.   In my case, I chose the default for everything and the Cloudflare servers as my upstream DNS.  Post-Installation  Change the password During the installation, a new password for the web interface is showed. If you missed it, a new password can be generated running pihole -a -p  Networking settings  Pi-hole can serve as DHCP, this is helpful to be sure all the hosts in the network are using Pi-hole as DNS. I wanted to enable it and set an static lease for my RPi and my modem/router. That can be done easily using the admin interface:     DHCP (Dynamic Host Configuration Protocol) is a protocol that assigns IP address (and other networking settings like DNS) to hosts that are just connecting to a network. This way it is not required anymore to set manually such settings to connect a computer.      In left bar, click on Settings        On the top, click on the DHCP tab.             On DHCP Settings:                    DHCP server enabled is unchecked (it will be enabled in the last step)           Set the range, in my case from: 192.168.2.1 to 192.168.2.254 (this is the range of possible IP address that the DHCP can assign)           Set the gateway, in my case 192.168.2.1                                On Static DHCP leases configuration          I write the MAC address, the current IP address and as hostname “raspberry-pi” and click in the “plus” button to the right.          I did the same for my router, but hostname is “steve” (for some reason, that is how my ISP calls this model).                       Set and static IP to my raspberry pi. During the installation it was told that Pi-hole needs an static IP and a static lease in a DHCP will work, however as in my case Pi-hole is also the DHCP server, I need to set an static IP manually.             I set an static lease for my rpi in step 2.2 to be sure the DHCP server doesn’t assign the same IP to another host.           To do this, you only need to modify a file in /etc/network/interfaces.d/ in my case that file is eth0 and it ended looking like this:      auto eth0  iface eth0 inet static          address 192.168.2.20/24          gateway 192.168.2.1  iface eth0 inet6 auto          Pretty simple, an address and its netmask with its gateway. IPv6 is still handled automatically.      Enable the DHCP using the web interface.   Disable the DHCP on my router. (I can not give much details here as there is too many different routers/modem given by the ISP in different countries. But it should be somewhere around Network Settings )   The last step is to make sure the RPi is using the Pi-hole DNS. To do this, modify its /etc/resolv.conf file to something like this:     domain lan search lan nameserver 192.168.2.20                  the lan in domain and search can be changed, you only to be sure it matchs the Pi-hole domain name setting, which you can modified in the Pi-hole DHCP settings.           Now everything is set, all the things connected to my network will use the Pi-hole as DNS and I will see a lot less ads as consequence.     You can add additional blocklists (or use another one) to Pi-hole: In the left, click on Adlist, now you can write the URL that has the blocklist and a comment, then click on Add. At the bottom you can enable or disable any blocklist.  Finally, you need to update list of blocked domains, on the left, click on Tools, then click on Update Gravity and now click on the Update buttom.   How it works:  What Pi-hole does is to return an special IP address (0.0.0.0) 1 which mean this host on this network, thus making any request unroutable.  Let’s see the difference:  sequenceDiagram title Normal scenario     participant My Computer     participant ISP DNS     participant Internet     My Computer-&gt;&gt;ISP DNS: I want to visit facebook.com     ISP DNS-&gt;&gt;My Computer: facebook.com is 31.13.80.36     My Computer -&gt;&gt; Internet: Request to 31.13.80.36     Internet -&gt;&gt; My Computer: Here you go   Now, that sequence would happen when you when the browser shows you an ad. It needs first the IP address of the server who has the ad to request it.  But now Pi-hole will return an invalid address.  sequenceDiagram title Pi-hole scenario     participant My Computer     participant Pi-hole     participant Internet     My Computer-&gt;&gt;Pi-hole: I want to visit trackingads.com     Pi-hole-&gt;&gt;My Computer: trackingads.com is \"0.0.0.0\"     My Computer -&gt;&gt; My Computer: Can not connect, nothing to show   Real example If I visit www.cnn.com I can see the following errors in Firefox:   Errors in Firefox network monitor  And we can verify those in the Pi-hole logs   Pi-hole logs                 wikipedia &#8617;&#xfe0e;          "
  },
  
  {
    "title": "Disabling Wifi and Bluetooth in RPi 4",
    "url": "/posts/disabling-wifi/",
    "categories": "self-hosted",
    "tags": "raspberry-pi, debian",
    "date": "2023-12-29 00:00:00 -0500",
    "content": "I started to use my raspberry pi 4 not long ago. As I use Debian the obvious choise  was to flash the Raspberry Pi Debian image into the SD card.  Now, as I’m planning connect it with a ethernet cable, I decided to disable the radio antennas. I tried to ways to achieve that.  Disabling them using config.txt To do that you only need to:     Create (or modify) /etc/default/raspi-firmware-custom with:     # Disable bluetooth and wifi dtoverlay=disable-wifi dtoverlay=disable-bt                Run update-initramfs -u -k all      This basically will update the /boot/firmware/config.txt with the above lines.         Remember that raspberry pi uses a config.txt file to modify the settings you would expect in the BIOS/UEFI in a normal PC.   Now, after I restarted it, I noticed it didn’t work. Checking /etc/default/raspi-firmware I read Maybe not all options are supported..  So, I proceed to disable the modules.  Disabling the wifi/bt modules    Create this file /etc/modprobe.d/raspi-blacklist.conf and add:      # Disable wifi  blacklist brcmfmac  blacklist brcmutil   # Disable bluetooth  blacklist hci_uart  blacklist btbcm  blacklist btintel  blacklist rfcom  blacklist btqca  blacklist btsdio  blacklist bluetooth           Restart   This time it worked! \\o/. "
  }
  
]

